id: add-websocket-notifications
title: "Implement Real-Time Product Notifications via WebSockets"
description: |
  To make the application more dynamic, we want to notify all users in real-time when a new product is added. This task requires setting up a WebSocket server and integrating it with both the backend and frontend.

  **Backend Requirements:**
  1.  Integrate the `ws` library to create a WebSocket server.
  2.  The WebSocket server must be attached to the existing Express HTTP server.
  3.  Create a broadcast mechanism that can send a message to all connected clients.
  4.  After a new product is successfully created via the `POST /api/products` endpoint, the server should broadcast a JSON message of the shape `{ "type": "NEW_PRODUCT", "payload": newProductObject }` to all clients.

  **Frontend Requirements:**
  1.  Create a custom React hook or utility to manage the WebSocket connection.
  2.  When the application loads, it should establish a connection to the WebSocket server.
  3.  The frontend must listen for incoming messages.
  4.  When a message with `type: "NEW_PRODUCT"` is received, a visible notification should appear on the screen (e.g., a simple `alert()` or a new element appearing in the DOM).

author_email: "artasyaskar@gmail.com"
difficulty: "hard"
estimated_time: 50
tags: ["feature", "websockets", "real-time", "backend", "frontend"]
prerequisites: ["add-jwt-authentication"]
files_to_modify:
  - "src/server/src/index.ts"
  - "src/server/src/websockets.ts"
  - "src/server/src/services/productService.ts"
  - "src/client/src/App.tsx"
  - "src/server/package.json"
success_criteria:
  - "The `websocket.test.ts` file must pass."
  - "The WebSocket server is successfully attached to the HTTP server and accepts connections."
  - "When a new product is created, a correctly formatted message is broadcast to all connected WebSocket clients."
  - "The frontend connects to the WebSocket server on load."
  - "The frontend displays a notification when a `NEW_PRODUCT` message is received."
